# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type AdminUser {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
  blocked: AdminUserBlockedType
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

enum AdminUserBlockedType {
  blocked
  unblocked
}

input AdminUserWhereUniqueInput {
  id: ID
  email: String
}

input AdminUserWhereInput {
  AND: [AdminUserWhereInput!]
  OR: [AdminUserWhereInput!]
  NOT: [AdminUserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
  blocked: AdminUserBlockedTypeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input AdminUserBlockedTypeNullableFilter {
  equals: AdminUserBlockedType
  in: [AdminUserBlockedType!]
  notIn: [AdminUserBlockedType!]
  not: AdminUserBlockedTypeNullableFilter
}

input AdminUserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
  blocked: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AdminUserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
  blocked: AdminUserBlockedType
}

input AdminUserUpdateArgs {
  where: AdminUserWhereUniqueInput!
  data: AdminUserUpdateInput!
}

input AdminUserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
  blocked: AdminUserBlockedType
}

type Post {
  id: ID!
  title: String
  content: Post_content_Document
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input PostUpdateInput {
  title: String
  content: JSON
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createAdminUser(data: AdminUserCreateInput!): AdminUser
  createAdminUsers(data: [AdminUserCreateInput!]!): [AdminUser]
  updateAdminUser(where: AdminUserWhereUniqueInput!, data: AdminUserUpdateInput!): AdminUser
  updateAdminUsers(data: [AdminUserUpdateArgs!]!): [AdminUser]
  deleteAdminUser(where: AdminUserWhereUniqueInput!): AdminUser
  deleteAdminUsers(where: [AdminUserWhereUniqueInput!]!): [AdminUser]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  endSession: Boolean!
  authenticateAdminUserWithPassword(email: String!, password: String!): AdminUserAuthenticationWithPasswordResult
  createInitialAdminUser(data: CreateInitialAdminUserInput!): AdminUserAuthenticationWithPasswordSuccess!
}

union AdminUserAuthenticationWithPasswordResult = AdminUserAuthenticationWithPasswordSuccess | AdminUserAuthenticationWithPasswordFailure

type AdminUserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: AdminUser!
}

type AdminUserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialAdminUserInput {
  name: String
  email: String
  password: String
}

type Query {
  adminUsers(where: AdminUserWhereInput! = {}, orderBy: [AdminUserOrderByInput!]! = [], take: Int, skip: Int! = 0): [AdminUser!]
  adminUser(where: AdminUserWhereUniqueInput!): AdminUser
  adminUsersCount(where: AdminUserWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = AdminUser

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
